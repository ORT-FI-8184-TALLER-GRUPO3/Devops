name: Reusable Java CI/CD

on:
  workflow_call:
    inputs:
      service:
        required: true
        type: string
      target:
        required: true
        type: string
      pom_path:
        required: false
        type: string
        default: './pom.xml'
      SONAR_PROJECT:
        required: true
        type: string

jobs:
  SonarTest:
    uses: ./.github/workflows/sonarscan_backends.yml
    with:
      SONAR_PROJECT: ${{ inputs.SONAR_PROJECT }}  
    secrets:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  build-and-deploy:
    needs: SonarTest
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'temurin'

    - name: Build with Maven
      run: mvn -B package --file ${{ inputs.pom_path }} -DskipTests

    - name: Build Docker Image
      run:  docker build -t "${{ inputs.service }}-${{ inputs.target }}:${{ github.sha }}" .

    # Configurar AWS Credentials
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

    # Login a Amazon ECR
    - name: Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1

    # Subir la imagen a ECR
    - name: Build, tag, and push image to Amazon ECR
      run: |
        docker build -t "${{ secrets.AWS_ECR_REGISTRY }}/${{ inputs.service }}:${{ github.sha }}" .
        docker push "${{ secrets.AWS_ECR_REGISTRY }}/${{ inputs.service }}:${{ github.sha }}"

    # Actualizar la definición de tarea con la nueva imagen
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def # Aquí se define el ID del paso para referenciarlo más adelante
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: deploy/task-definition.json
        container-name: ${{ inputs.service }}
        image: ${{ secrets.AWS_ECR_REGISTRY }}/${{ inputs.service }}:${{ github.sha }}

    # Desplegar la tarea en ECS
    - name: Deploy to Amazon ECS
      if: ${{ success() }} # Aseguramos que solo se ejecuta si todos los pasos anteriores fueron exitosos
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ inputs.service }}
        cluster: BackendCluster
        wait-for-service-stability: true

    
